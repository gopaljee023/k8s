### Understanding RBAC in Kubernetes: A Beginner's Guide

#### **What is RBAC?**

RBAC stands for **Role-Based Access Control**. Itâ€™s a way of controlling who can do what within a Kubernetes cluster. Think of it like security guards in a building who check if you have the right key (role) to access certain rooms (resources).
#### **Key Concepts in RBAC**

1. **Role**:
   - **Definition**: A Role in Kubernetes is a collection of permissions. It defines what actions can be performed on what resources within a specific namespace.
   - **Example**: 
     - You can create a role that allows a user to only read (but not modify) Pods in the `dev` namespace.

     ```yaml
     apiVersion: rbac.authorization.k8s.io/v1
     kind: Role
     metadata:
       namespace: dev
       name: pod-reader
     rules:
     - apiGroups: [""]
       resources: ["pods"]
       verbs: ["get", "list", "watch"]
     ```
Note: verbs: ["get", "list", "watch"] : These verbs suggest that this role (pod-reader) only allows to allow get,list and watch operation on pods ..
2. **ClusterRole**:
   - **Definition**: A ClusterRole is similar to a Role, but it works across the entire cluster, not just within a specific namespace.
   - **Use Case**: Use ClusterRoles for permissions that should be available cluster-wide, like accessing all nodes.

3. **RoleBinding**:
   - **Definition**: A RoleBinding gives *specific users or service accounts* the permissions defined in a Role within a particular namespace.
   - **Example**:
     - You can bind the `pod-reader` role to a user named `john`.

     ```yaml
     apiVersion: rbac.authorization.k8s.io/v1
     kind: RoleBinding
     metadata:
       name: read-pods
       namespace: dev
     subjects:
     - kind: User
       name: john
       apiGroup: rbac.authorization.k8s.io
     roleRef:
       kind: Role
       name: pod-reader
       apiGroup: rbac.authorization.k8s.io
     ```

4. **ClusterRoleBinding**:
   - **Definition**: A ClusterRoleBinding grants cluster-wide permissions to a user or group.
   - **Use Case**: Use this when you need to give someone permissions across all namespaces.

#### **Putting it All Together: An Example Scenario**

Imagine you have a Kubernetes cluster with several namespaces: `dev`, `test`, and `prod`. You have two users: gjee and akhil.

- **gjee** is a developer who should be able to read and write pods only in the `dev` namespace.
- **akhil** is a tester who should only be able to read pods in both the `test` and `prod` namespaces.

**Step 1: Create Roles**

1. **Developer Role for gjee**:
    - Role: `dev-developer`
    - Namespace: `dev`
    - Permissions: `get`, `list`, `create`, `delete` on pods.

    ```yaml
    apiVersion: rbac.authorization.k8s.io/v1
    kind: Role
    metadata:
      namespace: dev
      name: dev-developer
    rules:
    - apiGroups: [""]
      resources: ["pods"]
      verbs: ["get", "list", "create", "delete"]
    ```

2. **Tester Role for akhil**:
    - Role: `read-only`
    - Namespace: `test` and `prod`
    - Permissions: `get`, `list` on pods.

    ```yaml
    apiVersion: rbac.authorization.k8s.io/v1
    kind: Role
    metadata:
      namespace: test
      name: read-only
    rules:
    - apiGroups: [""]
      resources: ["pods"]
      verbs: ["get", "list"]
    ```

**Step 2: Bind Roles to Users**

1. **Bind the `dev-developer` Role to gjee**:
    ```yaml
    apiVersion: rbac.authorization.k8s.io/v1
    kind: RoleBinding
    metadata:
      name: dev-developer-binding
      namespace: dev
    subjects:
    - kind: User
      name: gjee
      apiGroup: rbac.authorization.k8s.io
    roleRef:
      kind: Role
      name: dev-developer
      apiGroup: rbac.authorization.k8s.io
    ```

2. **Bind the `read-only` Role to akhil**:
    - For `test` namespace:
    ```yaml
    apiVersion: rbac.authorization.k8s.io/v1
    kind: RoleBinding
    metadata:
      name: test-read-binding
      namespace: test
    subjects:
    - kind: User
      name: akhil
      apiGroup: rbac.authorization.k8s.io
    roleRef:
      kind: Role
      name: read-only
      apiGroup: rbac.authorization.k8s.io
    ```

    - For `prod` namespace:
    ```yaml
    apiVersion: rbac.authorization.k8s.io/v1
    kind: RoleBinding
    metadata:
      name: prod-read-binding
      namespace: prod
    subjects:
    - kind: User
      name: akhil
      apiGroup: rbac.authorization.k8s.io
    roleRef:
      kind: Role
      name: read-only
      apiGroup: rbac.authorization.k8s.io
    ```

### **Summary**
- **RBAC** in Kubernetes controls who can do what within the cluster.
- **Roles** and **RoleBindings** are the core concepts, where roles define permissions and bindings assign them to users or service accounts.
- **ClusterRoles** and **ClusterRoleBindings** extend this concept across the entire cluster.

Understanding RBAC is key to securing your Kubernetes cluster by making sure each user and service has only the access it needs.
